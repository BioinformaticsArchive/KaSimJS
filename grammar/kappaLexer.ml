# 1 "grammar/kappaLexer.mll"
 
 open Lexing
 open KappaParser
 open ExceptionDefn

 let reach_eof lexbuf = 
   lexbuf.lex_eof_reached <- true 

 let reset_eof lexbuf = 
   lexbuf.lex_eof_reached <- false 

 let incr_line lexbuf = 
   let pos = lexbuf.lex_curr_p in
     lexbuf.lex_curr_p <- {pos with pos_lnum = pos.pos_lnum+1 ; pos_bol = pos.pos_cnum}

 let return_error lexbuf msg = 
	let pos = lexbuf.lex_curr_p in
		let line = pos.pos_lnum in
			let loc = Printf.sprintf "line %d, character %d:" line (pos.pos_cnum - pos.pos_bol) in
			let full_msg = Printf.sprintf "Error (%s) %s %s" pos.pos_fname loc msg 
			in
				Printf.eprintf "%s\n" full_msg ; exit 1 
			
 let position lexbuf = 
	let pos = lexbuf.lex_curr_p in
		(pos.pos_fname, pos.pos_lnum, pos.pos_cnum - pos.pos_bol)

# 30 "grammar/kappaLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\205\255\206\255\207\255\208\255\209\255\079\000\211\255\
    \214\255\215\255\216\255\217\255\218\255\219\255\221\255\000\000\
    \105\000\235\255\236\255\237\255\238\255\192\000\240\255\011\001\
    \038\001\243\255\244\255\245\255\019\000\029\000\001\000\055\000\
    \076\000\116\001\194\001\001\000\255\255\016\002\094\002\172\002\
    \250\002\072\003\252\255\251\255\250\255\001\000\248\255\247\255\
    \152\003\227\003\008\004\179\000\021\001\237\003\249\003\086\004\
    \164\004\242\004\061\005\071\005\081\005\213\255\033\000\042\000\
    \026\000\031\000\031\000\045\000\050\000\060\000\098\000\061\000\
    \070\000\233\255\060\000\065\000\232\255\089\000\227\255\093\000\
    \231\255\097\000\230\255\097\000\229\255\115\000\228\255\114\000\
    \226\255\101\000\118\000\225\255\115\000\110\000\125\000\224\255\
    \223\255\093\005\103\005\212\255\164\005\069\005\251\255\002\000\
    \253\255\254\255\255\255\252\255\168\004\252\255\253\255\004\000\
    \255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\050\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\000\
    \050\000\255\255\255\255\255\255\255\255\016\000\255\255\021\000\
    \013\000\255\255\255\255\255\255\050\000\035\000\009\000\050\000\
    \050\000\016\000\016\000\050\000\255\255\001\000\016\000\016\000\
    \016\000\002\000\255\255\255\255\255\255\006\000\255\255\255\255\
    \016\000\014\000\013\000\255\255\014\000\255\255\014\000\014\000\
    \016\000\014\000\255\255\014\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\045\000\255\255\255\255\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\102\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\109\000\000\000\000\000\255\255\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\027\000\036\000\107\000\026\000\113\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\007\000\046\000\025\000\028\000\008\000\031\000\022\000\
    \018\000\017\000\014\000\015\000\019\000\029\000\023\000\012\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\032\000\047\000\011\000\009\000\010\000\005\000\
    \020\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\045\000\035\000\043\000\013\000\004\000\
    \016\000\021\000\021\000\021\000\034\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\033\000\021\000\021\000\
    \021\000\021\000\021\000\097\000\030\000\044\000\006\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\042\000\096\000\092\000\089\000\087\000\085\000\083\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\081\000\079\000\072\000\073\000\077\000\076\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\067\000\075\000\069\000\078\000\068\000\063\000\
    \080\000\082\000\065\000\074\000\084\000\071\000\066\000\086\000\
    \088\000\062\000\090\000\091\000\070\000\064\000\053\000\093\000\
    \053\000\094\000\095\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\021\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
    \000\000\000\000\000\000\021\000\049\000\000\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
    \021\000\021\000\021\000\048\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\021\000\058\000\021\000\
    \021\000\021\000\021\000\048\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
    \000\000\000\000\000\000\021\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\038\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
    \000\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\037\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\039\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
    \000\000\000\000\000\000\021\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\040\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
    \000\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\041\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\053\000\000\000\056\000\000\000\000\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
    \051\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\021\000\049\000\000\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \051\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\112\000\000\000\000\000\021\000\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
    \000\000\000\000\000\000\021\000\111\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\106\000\
    \000\000\021\000\105\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\000\000\051\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \110\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
    \000\000\000\000\000\000\000\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\099\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\104\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\035\000\103\000\000\000\111\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\000\000\030\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\032\000\062\000\063\000\064\000\065\000\066\000\067\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\068\000\069\000\071\000\072\000\074\000\075\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\016\000\070\000\016\000\077\000\016\000\016\000\
    \079\000\081\000\016\000\070\000\083\000\016\000\016\000\085\000\
    \087\000\016\000\089\000\090\000\016\000\016\000\051\000\092\000\
    \051\000\093\000\094\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\021\000\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\255\255\255\255\255\255\021\000\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\255\255\
    \255\255\255\255\255\255\024\000\024\000\255\255\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\255\255\255\255\255\255\255\255\024\000\023\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\033\000\255\255\255\255\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\255\255\255\255\033\000\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \255\255\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\034\000\255\255\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\037\000\255\255\255\255\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\255\255\255\255\255\255\255\255\037\000\
    \255\255\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\038\000\255\255\255\255\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\255\255\255\255\255\255\255\255\038\000\255\255\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\039\000\255\255\255\255\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\255\255\
    \255\255\255\255\255\255\039\000\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\040\000\
    \255\255\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\255\255\255\255\255\255\
    \255\255\040\000\255\255\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\041\000\255\255\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\255\255\255\255\255\255\255\255\041\000\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\048\000\255\255\048\000\255\255\255\255\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\255\255\255\255\255\255\255\255\048\000\
    \255\255\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\255\255\
    \049\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\255\255\255\255\050\000\050\000\255\255\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \049\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\255\255\255\255\255\255\255\255\050\000\
    \255\255\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\055\000\255\255\255\255\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\255\255\108\000\255\255\255\255\055\000\255\255\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\056\000\255\255\255\255\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\255\255\
    \255\255\255\255\255\255\056\000\108\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\057\000\
    \255\255\255\255\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\255\255\255\255\101\000\
    \255\255\057\000\101\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\255\255\059\000\097\000\097\000\097\000\
    \097\000\097\000\097\000\097\000\097\000\097\000\097\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\101\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \108\000\255\255\255\255\255\255\059\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\060\000\255\255\
    \255\255\255\255\255\255\255\255\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\098\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\101\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 40 "grammar/kappaLexer.mll"
             (incr_line lexbuf ; token lexbuf)
# 529 "grammar/kappaLexer.ml"

  | 1 ->
# 41 "grammar/kappaLexer.mll"
         (let pos = position lexbuf in DO pos)
# 534 "grammar/kappaLexer.ml"

  | 2 ->
# 42 "grammar/kappaLexer.mll"
            (let pos = position lexbuf in UNTIL pos)
# 539 "grammar/kappaLexer.ml"

  | 3 ->
# 43 "grammar/kappaLexer.mll"
         (let pos = position lexbuf in SET pos)
# 544 "grammar/kappaLexer.ml"

  | 4 ->
# 44 "grammar/kappaLexer.mll"
         (let pos = position lexbuf in AND pos)
# 549 "grammar/kappaLexer.ml"

  | 5 ->
# 45 "grammar/kappaLexer.mll"
         (let pos = position lexbuf in OR pos)
# 554 "grammar/kappaLexer.ml"

  | 6 ->
# 46 "grammar/kappaLexer.mll"
           (KAPPA_RAR)
# 559 "grammar/kappaLexer.ml"

  | 7 ->
# 47 "grammar/kappaLexer.mll"
          (let pos = position lexbuf in KAPPA_NOPOLY pos)
# 564 "grammar/kappaLexer.ml"

  | 8 ->
# 48 "grammar/kappaLexer.mll"
         (let lab = read_label "" [')'] lexbuf in 
						let pos = position lexbuf in 
							match lab with
								| "T" -> (TIME pos)
								| "E" -> (EVENT pos)
								| "DEL" -> (DELETE pos)
								| "ADD" -> (INTRO pos)
								| "SNAPSHOT" -> (SNAPSHOT pos) 
								| "STOP" -> (STOP pos) 
								| _ as s -> return_error lexbuf ("Keyword \""^s^"\" is not defined")
					 )
# 579 "grammar/kappaLexer.ml"

  | 9 ->
# 59 "grammar/kappaLexer.mll"
        (PIPE)
# 584 "grammar/kappaLexer.ml"

  | 10 ->
# 60 "grammar/kappaLexer.mll"
           (incr_line lexbuf ; NEWLINE)
# 589 "grammar/kappaLexer.ml"

  | 11 ->
# 61 "grammar/kappaLexer.mll"
         (incr_line lexbuf ; NEWLINE)
# 594 "grammar/kappaLexer.ml"

  | 12 ->
# 62 "grammar/kappaLexer.mll"
          (comment lexbuf)
# 599 "grammar/kappaLexer.ml"

  | 13 ->
let
# 63 "grammar/kappaLexer.mll"
                 n
# 605 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 63 "grammar/kappaLexer.mll"
                   (let pos = position lexbuf in INT(int_of_string n,pos))
# 609 "grammar/kappaLexer.ml"

  | 14 ->
let
# 64 "grammar/kappaLexer.mll"
              f
# 615 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 64 "grammar/kappaLexer.mll"
                (let pos = position lexbuf in FLOAT(float_of_string f,pos))
# 619 "grammar/kappaLexer.ml"

  | 15 ->
# 65 "grammar/kappaLexer.mll"
           (let lab = read_label "" ['\''] lexbuf in let pos = position lexbuf in LABEL(lab,pos))
# 624 "grammar/kappaLexer.ml"

  | 16 ->
let
# 66 "grammar/kappaLexer.mll"
            str
# 630 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "grammar/kappaLexer.mll"
                (let pos = position lexbuf in ID(str,pos))
# 634 "grammar/kappaLexer.ml"

  | 17 ->
# 67 "grammar/kappaLexer.mll"
          (AT)
# 639 "grammar/kappaLexer.ml"

  | 18 ->
# 68 "grammar/kappaLexer.mll"
          (COMMA)
# 644 "grammar/kappaLexer.ml"

  | 19 ->
# 69 "grammar/kappaLexer.mll"
          (OP_PAR)
# 649 "grammar/kappaLexer.ml"

  | 20 ->
# 70 "grammar/kappaLexer.mll"
          (CL_PAR)
# 654 "grammar/kappaLexer.ml"

  | 21 ->
# 71 "grammar/kappaLexer.mll"
        (DOT)
# 659 "grammar/kappaLexer.ml"

  | 22 ->
# 72 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in LOG pos)
# 664 "grammar/kappaLexer.ml"

  | 23 ->
# 73 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in SINUS pos)
# 669 "grammar/kappaLexer.ml"

  | 24 ->
# 74 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in COSINUS pos)
# 674 "grammar/kappaLexer.ml"

  | 25 ->
# 75 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in EXPONENT pos)
# 679 "grammar/kappaLexer.ml"

  | 26 ->
# 76 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in ABS pos)
# 684 "grammar/kappaLexer.ml"

  | 27 ->
# 77 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in MODULO pos)
# 689 "grammar/kappaLexer.ml"

  | 28 ->
# 78 "grammar/kappaLexer.mll"
            (let pos = position lexbuf in SQRT pos)
# 694 "grammar/kappaLexer.ml"

  | 29 ->
# 79 "grammar/kappaLexer.mll"
           (let pos = position lexbuf in INFINITY pos)
# 699 "grammar/kappaLexer.ml"

  | 30 ->
# 80 "grammar/kappaLexer.mll"
            (let pos = position lexbuf in TRUE pos)
# 704 "grammar/kappaLexer.ml"

  | 31 ->
# 81 "grammar/kappaLexer.mll"
             (let pos = position lexbuf in FALSE pos)
# 709 "grammar/kappaLexer.ml"

  | 32 ->
# 82 "grammar/kappaLexer.mll"
          (let pos = position lexbuf in FLOAT (3.14159265,pos))
# 714 "grammar/kappaLexer.ml"

  | 33 ->
# 83 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in PLUS pos)
# 719 "grammar/kappaLexer.ml"

  | 34 ->
# 84 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in MULT pos)
# 724 "grammar/kappaLexer.ml"

  | 35 ->
# 85 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in MINUS pos)
# 729 "grammar/kappaLexer.ml"

  | 36 ->
# 86 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in POW pos)
# 734 "grammar/kappaLexer.ml"

  | 37 ->
# 87 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in DIV pos)
# 739 "grammar/kappaLexer.ml"

  | 38 ->
# 88 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in SMALLER pos)
# 744 "grammar/kappaLexer.ml"

  | 39 ->
# 89 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in GREATER pos)
# 749 "grammar/kappaLexer.ml"

  | 40 ->
# 90 "grammar/kappaLexer.mll"
        (let pos = position lexbuf in EQUAL pos)
# 754 "grammar/kappaLexer.ml"

  | 41 ->
# 91 "grammar/kappaLexer.mll"
        (let lab = read_label "" [':'] lexbuf in 
						let pos = position lexbuf in 
							match lab with
								| "agent" -> (SIGNATURE pos)
								| "init" -> (INIT pos)
								| "var" -> (LET pos)
								| "plot" -> (PLOT pos)
								| "mod" -> (PERT pos)
								| "ref" -> (REF pos)
								| "obs" -> (OBS pos)
								| _ as s -> return_error lexbuf ("Instruction \""^s^"\" not recognized")
					 )
# 770 "grammar/kappaLexer.ml"

  | 42 ->
let
# 103 "grammar/kappaLexer.mll"
                  s
# 776 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 103 "grammar/kappaLexer.mll"
                    ( let i = String.index s '{' in 
													let j = String.index s '}' in 
														let r = String.sub s (i+1) (j-i-1) in 
															try DOT_RADIUS (int_of_string r) with 
																| Failure _ -> return_error lexbuf (Printf.sprintf "Invalid radius")
										   )
# 785 "grammar/kappaLexer.ml"

  | 43 ->
let
# 109 "grammar/kappaLexer.mll"
                   s
# 791 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 109 "grammar/kappaLexer.mll"
                     (let i = String.index s '{' in 
													let j = String.index s '}' in 
														let r = String.sub s (i+1) (j-i-1) in 
															try PLUS_RADIUS (int_of_string r) with 
																| Failure _ -> return_error lexbuf (Printf.sprintf "Invalid radius")
										   )
# 800 "grammar/kappaLexer.ml"

  | 44 ->
# 115 "grammar/kappaLexer.mll"
          (KAPPA_LNK)
# 805 "grammar/kappaLexer.ml"

  | 45 ->
let
# 116 "grammar/kappaLexer.mll"
                        s
# 811 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 116 "grammar/kappaLexer.mll"
                          (let i = String.index s '~' in 
			                     	 let r = String.sub s (i+1) (String.length s-i-1) in
																let pos = position lexbuf in 
																	KAPPA_MRK (r,pos)
													 )
# 819 "grammar/kappaLexer.ml"

  | 46 ->
# 121 "grammar/kappaLexer.mll"
          (let pos = position lexbuf in (KAPPA_WLD pos))
# 824 "grammar/kappaLexer.ml"

  | 47 ->
# 122 "grammar/kappaLexer.mll"
          (let pos = position lexbuf in (KAPPA_SEMI pos))
# 829 "grammar/kappaLexer.ml"

  | 48 ->
# 123 "grammar/kappaLexer.mll"
             (token lexbuf)
# 834 "grammar/kappaLexer.ml"

  | 49 ->
# 124 "grammar/kappaLexer.mll"
          (reach_eof lexbuf; EOF)
# 839 "grammar/kappaLexer.ml"

  | 50 ->
let
# 125 "grammar/kappaLexer.mll"
           c
# 845 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 125 "grammar/kappaLexer.mll"
             (return_error lexbuf (Printf.sprintf "invalid use of character %c" c))
# 849 "grammar/kappaLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and read_label acc char_list lexbuf =
    __ocaml_lex_read_label_rec acc char_list lexbuf 101
and __ocaml_lex_read_label_rec acc char_list lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 128 "grammar/kappaLexer.mll"
           (if List.mem '\n' char_list then acc else return_error lexbuf (Printf.sprintf "invalid sequence "^acc))
# 860 "grammar/kappaLexer.ml"

  | 1 ->
# 129 "grammar/kappaLexer.mll"
         (if List.mem '\r' char_list then acc else return_error lexbuf (Printf.sprintf "invalid sequence "^acc))
# 865 "grammar/kappaLexer.ml"

  | 2 ->
# 130 "grammar/kappaLexer.mll"
          (return_error lexbuf (Printf.sprintf "invalid sequence "^acc))
# 870 "grammar/kappaLexer.ml"

  | 3 ->
# 131 "grammar/kappaLexer.mll"
             (incr_line lexbuf ; read_label acc char_list lexbuf)
# 875 "grammar/kappaLexer.ml"

  | 4 ->
let
# 132 "grammar/kappaLexer.mll"
           c
# 881 "grammar/kappaLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 132 "grammar/kappaLexer.mll"
             (if List.mem c char_list then acc else read_label (Printf.sprintf "%s%c" acc c) char_list lexbuf)
# 885 "grammar/kappaLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_label_rec acc char_list lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 108
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 135 "grammar/kappaLexer.mll"
           (incr_line lexbuf ; NEWLINE)
# 896 "grammar/kappaLexer.ml"

  | 1 ->
# 136 "grammar/kappaLexer.mll"
             (incr_line lexbuf ; comment lexbuf)
# 901 "grammar/kappaLexer.ml"

  | 2 ->
# 137 "grammar/kappaLexer.mll"
          (EOF)
# 906 "grammar/kappaLexer.ml"

  | 3 ->
# 138 "grammar/kappaLexer.mll"
        (comment lexbuf)
# 911 "grammar/kappaLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 140 "grammar/kappaLexer.mll"
    
  let compile fic =
		let d = open_in fic in
		Parameter.openInDescriptors := d::(!Parameter.openInDescriptors) ;
		let lexbuf = Lexing.from_channel d in
		lexbuf.lex_curr_p <- {lexbuf.lex_curr_p with pos_fname = fic} ;
		try
	   	KappaParser.line token lexbuf ; close_in d ;
			Parameter.openInDescriptors := List.tl (!Parameter.openInDescriptors)
 		with 
 			| Syntax_Error msg -> 
				(close_in d ; 
				Parameter.openInDescriptors := List.tl (!Parameter.openInDescriptors) ; 
				return_error lexbuf msg
				) 

# 934 "grammar/kappaLexer.ml"
